
//Library Inclusions and Global Declarations
#define VERSION
#include <WiFi.h>
#include <SD.h>
#include <Audio.h>
#include <Arduino.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>
#include <SimpleTimer.h>

// Global Variables and Configurations
String text;
String filteredAnswer = "";
String repeat;
SimpleTimer Timer;
float batteryVoltage;

//WiFi and API Credentials
const char* ssid = "";
const char* password = "";
const char* OPENAI_KEY = "";
const char* gemini_KEY = "";
const char* deepgramApiKey = "";

//Audio and Model Configurations
#define TTS_MODEL 0
String OpenAI_Model = "gpt-3.5-turbo-instruct";
String OpenAI_Temperature = "0.20";
String OpenAI_Max_Tokens = "100";
#define AUDIO_FILE "/Audio.wav"
#define TTS_GOOGLE_LANGUAGE "bn-IN"

//Pin Assignments
#define pin_RECORD_BTN 36
#define pin_VOL_POTI 34
#define pin_repeat 13
#define pin_LED_RED 15
#define pin_LED_YELLOW 2
#define pin_LED_BLUE 4
#define pin_I2S_DOUT 25
#define pin_I2S_LRC 26
#define pin_I2S_BCLK 27
const int batteryPin = 34;

//Audio and Battery Configurations
const float R1 = 100000.0;
const float R2 = 10000.0;
const float adcMax = 4095.0;
const float vRef = 3.4;
const int numSamples = 100;
const float calibrationFactor = 1.48;
Audio audio_play;
bool I2S_Record_Init();
bool Record_Start(String filename);
bool Record_Available(String filename, float* audiolength_sec);
String SpeechToText_Deepgram(String filename);
void Deepgram_KeepAlive();

//Setup Function (Initializes serial, WiFi, SD card, LEDs, buttons, I2S, and audio.)
void setup() {
  Serial.begin(115200);
  Serial.setTimeout(100);
  pinMode(batteryPin, INPUT);
  analogReadResolution(12);
  pinMode(pin_LED_RED, OUTPUT);
  pinMode(pin_LED_Yellow, OUTPUT);
  pinMode(pin_LED_BLUE, OUTPUT);
  pinMode(pin_RECORD_BTN, INPUT);
  pinMode(pin_repeat, INPUT);
  pinMode(12, OUTPUT);
  digitalWrite(12, LOW);
  led_RGB(50, 0, 0); delay(500);
  led_RGB(0, 50, 0); delay(500);
  led_RGB(0, 0, 50); delay(500);
  led_RGB(0, 0, 0);
  Serial.println(VERSION);
  Timer.setInterval(10000);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.print("Connecting WLAN ");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print("."); delay(500);
  }
  Serial.println(". Done, device connected.");
  led_RGB(0, 50, 0);
  if (!SD.begin()) {
    Serial.println("ERROR - SD Card initialization failed!");
    return;
  }
  I2S_Record_Init();
  audio_play.setPinout(pin_I2S_BCLK, pin_I2S_LRC, pin_I2S_DOUT);
  audio_play.setVolume(21);
  Serial.println("> HOLD button for recording AUDIO .. RELEASE button for REPLAY & Deepgram transcription");
}

//Loop Function (Execution Logic)
void loop() {
here:
  if (digitalRead(pin_RECORD_BTN) == LOW) {
    led_RGB(50, 0, 0);
    delay(30);
    if (audio_play.isRunning()) {
      audio_play.connecttohost("");
    }
    Record_Start(AUDIO_FILE);
  }

  if (digitalRead(pin_RECORD_BTN) == HIGH) {
    led_RGB(0, 0, 0);
    float recorded_seconds;
    if (Record_Available(AUDIO_FILE, &recorded_seconds)) {
      if (recorded_seconds > 0.4) {
        String transcription = SpeechToText_Deepgram(AUDIO_FILE);
        String again = "Please Ask Again.............................................................................. ";
        Serial.println(transcription);
        if (transcription == "") {
          led_RGB(0, 0, 255);
          if (TTS_MODEL == 1)
            audio_play.openai_speech(OPENAI_KEY, "tts-1", again, "shimmer", "mp3", "1");
          else
            speakTextInChunks(again, 93);
          Serial.println("Please Ask Again");
          while (audio_play.isRunning()) audio_play.loop();
          goto here;
        }

        WiFiClientSecure client;
        client.setInsecure();
        String Answer = ""; text = "";
        if (client.connect("generativelanguage.googleapis.com", 443)) {
          String url = "/v1beta/models/gemini-1.5-flash:generateContent?key=" + String(gemini_KEY);
          String payload = String("{\"contents\": [{\"parts\":[{\"text\":\"" + transcription + "\"}]}],\"generationConfig\": {\"maxOutputTokens\": " + OpenAI_Max_Tokens + "}}");
          client.println("POST " + url + " HTTP/1.1");
          client.println("Host: generativelanguage.googleapis.com");
          client.println("Content-Type: application/json");
          client.print("Content-Length: ");
          client.println(payload.length());
          client.println(); client.println(payload);
          String response;
          while (client.connected()) {
            String line = client.readStringUntil('\n');
            if (line == "\r") break;
          }
          response = client.readString();
          parseResponse(response);
        } else {
          Serial.println("Connection failed!");
        }
        client.stop();

        if (filteredAnswer != "") {
          led_RGB(0, 0, 255);
          Serial.print("OpenAI speaking: ");
          Serial.println(filteredAnswer);
          if (TTS_MODEL == 1)
            audio_play.openai_speech(OPENAI_KEY, "tts-1", filteredAnswer.c_str(), "shimmer", "mp3", "1");
          else
            speakTextInChunks(filteredAnswer, 93);
        }
      }
    }
  }

  if (digitalRead(pin_repeat) == LOW) {
    delay(500);
    analogWrite(pin_LED_BLUE, 255);
    Serial.print("repeat - ");
    Serial.println(repeat);
    if (TTS_MODEL == 1)
      audio_play.openai_speech(OPENAI_KEY, "tts-1", repeat, "shimmer", "mp3", "1");
    else
      speakTextInChunks(repeat, 93);
  }

  audio_play.loop();

  if (audio_play.isRunning()) {
    analogWrite(pin_LED_BLUE, 255);
    if (digitalRead(pin_RECORD_BTN) == LOW) {
      goto here;
    }
  } else {
    analogWrite(pin_LED_BLUE, 0);
  }

  if (Timer.isReady()) {
    battry_filtering();
    Serial.print("Battery Voltage: ");
    Serial.println(batteryVoltage);
    if (batteryVoltage < 0.0) {
      String batt = "battery low. please charge";
      if (TTS_MODEL == 1)
        audio_play.openai_speech(OPENAI_KEY, "tts-1", batt.c_str(), "shimmer", "mp3", "1");
      else
        speakTextInChunks(batt.c_str(), 93);
    }
    Timer.reset();
  }

  if (digitalRead(pin_RECORD_BTN) == HIGH && !audio_play.isRunning()) {
    static uint32_t millis_ping_before;
    if (millis() > (millis_ping_before + 5000)) {
      millis_ping_before = millis();
      led_RGB(0, 0, 0);
      Deepgram_KeepAlive();
    }
  }
}
